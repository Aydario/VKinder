import os
from dotenv import load_dotenv
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api import VkApi, exceptions
from utils.keyboard import (
    get_main_keyboard, 
    get_candidate_keyboard,
    get_favorites_keyboard,
    get_search_settings_keyboard,
    get_empty_keyboard,
    get_priority_settings_keyboard,
    get_gender_keyboard
)
from database import get_db
from database.crud import (
    get_user, 
    save_verifier, 
    get_verifier, 
    update_user_token, 
    save_user_state, 
    get_user_state, 
    create_user,
    get_favorites,
    remove_from_favorites,
    like_photo,
    unlike_photo,
    add_to_favorites,
    add_to_blacklist,
    get_search_params,
    update_search_params,
    get_blacklist
)
from vkapi.auth import generate_auth_link, extract_auth_params, get_access_token, generate_state, validate_token
from vkapi.methods import VKUserData, VKPhotos
from utils.matching import CandidateMatcher
from config import Config
import logging
from utils.states import BotState
from typing import Optional, Dict, List
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class VKBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VK API.
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.config = Config()
        self.vk_session = None
        self.vk = None
        self.longpoll = None
        self.user_cache = {}  # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user_id: {data}}
        self._init_group_session()
        
    def _init_group_session(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã VK.
        
        –í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
        """
        try:
            self.vk_session = VkApi(token=self.config.VK_GROUP_TOKEN)
            self.vk = self.vk_session.get_api()
            self.longpoll = VkBotLongPoll(self.vk_session, group_id=self.config.VK_GROUP_ID)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
            raise

    def handle_auth_flow(self, user_id: int, text: str) -> Optional[str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Optional[str]: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ None, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        """
        text = text.strip()
        db = next(get_db())

        if text.lower() == "–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è":
            state = generate_state()
            auth_url, verifier = generate_auth_link(state)
            
            if not save_verifier(db, user_id, verifier, state):
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"

            # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = get_user(db, user_id)
            if not user:
                try:
                    user_info = self.vk.users.get(
                        user_ids=user_id,
                        fields="first_name,last_name,sex,city"
                    )[0]
                    
                    user_data = {
                        "user_id": user_id,
                        "first_name": user_info.get('first_name', ''),
                        "last_name": user_info.get('last_name', ''),
                        "gender": "female" if user_info.get('sex') == 1 else "male",
                        "city": user_info.get('city', {}).get('title') if isinstance(user_info.get('city'), dict) else None,
                        "state": BotState.AUTH_IN_PROGRESS.value
                    }
                    create_user(db, user_data)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"

            save_user_state(db, user_id, BotState.MAIN_MENU)

            return f"""–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é VK.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
{auth_url}

–î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '–†–∞–∑—Ä–µ—à–∏—Ç—å', –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É."""

        elif "code=" in text:
            params = extract_auth_params(text)
            if not params:
                return "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"

            verifier = get_verifier(db, user_id, params["state"])
            if not verifier:
                return "–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"

            token, vk_id = get_access_token(
                code=params["code"],
                code_verifier=verifier,
                state=params["state"],
                device_id=params["device_id"]
            )

            if not token or not vk_id:
                return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"

            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user = get_user(db, user_id)
            if not user:
                try:
                    user_info = self.vk.users.get(user_ids=user_id, fields="first_name,last_name")[0]
                    user_data = {
                        "user_id": user_id,
                        "first_name": user_info.get('first_name', ''),
                        "last_name": user_info.get('last_name', ''),
                        "state": BotState.MAIN_MENU.value
                    }
                    create_user(db, user_data)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    return "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"

            update_user_token(db, user_id, token)
            save_user_state(db, user_id, BotState.MAIN_MENU)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            self.vk.messages.send(
                user_id=user_id,
                message="‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:",
                keyboard=get_main_keyboard(),
                random_id=0
            )
            return None 

        return None

    def start_search(self, user_id: int):
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫
        """
        try:
            db = next(get_db())
            save_user_state(db, user_id, BotState.SEARCHING)
            
            user = get_user(db, user_id)
            if not user or not user.access_token or not validate_token(user.access_token):
                self.vk.messages.send(
                    user_id=user_id,
                    message="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ '–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'",
                    random_id=0
                )
                return
            
            if not get_search_params(db, user_id):
                self._init_default_search_params(user_id)

            matcher = CandidateMatcher(db, user_id, user.access_token)
            
            try:
                candidate = matcher.get_next_candidate()
            except exceptions.ApiError as e:
                if e.code == 9:  # Flood control
                    self.vk.messages.send(
                        user_id=user_id,
                        message="‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥...",
                        random_id=0
                    )
                    time.sleep(10)  # –ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                    candidate = matcher.get_next_candidate()
                else:
                    raise e  # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            
            if not candidate:
                self.vk.messages.send(
                    user_id=user_id,
                    message="üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
                    keyboard=get_main_keyboard(),
                    random_id=0
                )
                save_user_state(db, user_id, BotState.MAIN_MENU)
                return
            
            self.user_cache[user_id] = {'current_candidate': candidate}
            self.show_candidate(user_id, candidate)
            
        except Exception as e:
            logger.error(f"Search error: {e}")
            self.vk.messages.send(
                user_id=user_id,
                message="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
                random_id=0
            )

    def show_candidate(self, user_id: int, candidate: dict):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            candidate: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        """
        db = next(get_db())
        save_user_state(db, user_id, BotState.VIEWING_CANDIDATE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫–∏
        has_liked = False  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑ –ë–î
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üë§ {candidate.get('first_name', '')} {candidate.get('last_name', '')}\n"
            f"üîó –ü—Ä–æ—Ñ–∏–ª—å: vk.com/{candidate.get('domain', '')}\n"
            f"üíØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {candidate.get('match_score', 0)*100:.0f}%"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ç–æ
        attachments = None
        if candidate.get('photos'):
            photo_attachments = []
            for photo in candidate['photos']:
                photo_attachments.append(f"photo{photo['owner_id']}_{photo['id']}")
            attachments = ",".join(photo_attachments)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.vk.messages.send(
            user_id=user_id,
            message=message,
            keyboard=get_candidate_keyboard(has_liked),
            attachment=attachments,
            random_id=0
        )

    def show_favorites(self, user_id: int):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            db = next(get_db())
            save_user_state(db, user_id, BotState.FAVORITES)
            
            favorites = get_favorites(db, user_id)
            if not favorites:
                self.vk.messages.send(
                    user_id=user_id,
                    message="‚≠ê –í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç",
                    keyboard=get_main_keyboard(),
                    random_id=0
                )
                save_user_state(db, user_id, BotState.MAIN_MENU)
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            message = "‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ:\n\n"
            for i, fav in enumerate(favorites[:10], 1):
                message += f"{i}. id{fav.favorite_user_id}\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
            if user_id not in self.user_cache:
                self.user_cache[user_id] = {}
            self.user_cache[user_id]['favorites'] = [f.favorite_user_id for f in favorites]
            
            self.vk.messages.send(
                user_id=user_id,
                message=message,
                keyboard=get_favorites_keyboard(),
                random_id=0
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: {e}")
            self.vk.messages.send(
                user_id=user_id,
                message="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö",
                random_id=0
            )

    def remove_favorite(self, user_id: int, index: int):
        """
        –£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            index: –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        """
        try:
            db = next(get_db())
            if user_id not in self.user_cache or 'favorites' not in self.user_cache[user_id]:
                self.show_favorites(user_id)
                return
            
            favorites = self.user_cache[user_id]['favorites']
            if index < 1 or index > len(favorites):
                self.vk.messages.send(
                    user_id=user_id,
                    message="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                    random_id=0
                )
                return
            
            favorite_id = favorites[index-1]
            if remove_from_favorites(db, user_id, favorite_id):
                self.vk.messages.send(
                    user_id=user_id,
                    message=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id{favorite_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö",
                    random_id=0
                )
            else:
                self.vk.messages.send(
                    user_id=user_id,
                    message=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id{favorite_id}",
                    random_id=0
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            self.show_favorites(user_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: {e}")
            self.vk.messages.send(
                user_id=user_id,
                message="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏",
                random_id=0
            )

    def like_candidate_photos(self, user_id: int, candidate_id: int):
        """
        –°—Ç–∞–≤–∏—Ç –ª–∞–π–∫–∏ –Ω–∞ –ª—É—á—à–∏–µ —Ñ–æ—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            candidate_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        """
        candidate = self.user_cache.get(user_id, {}).get('current_candidate')
        if not candidate or not candidate.get('photos'):
            return
            
        db = next(get_db())
        liked = False
        
        for photo in candidate['photos'][:3]:
            if like_photo(db, user_id, photo['owner_id'], photo['id']):
                liked = True
        
        if liked:
            self.vk.messages.send(
                user_id=user_id,
                message="‚ù§Ô∏è –õ–∞–π–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ª—É—á—à–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!",
                keyboard=get_candidate_keyboard(True),
                random_id=0
            )

    def unlike_candidate_photos(self, user_id: int, candidate_id: int):
        """
        –£–±–∏—Ä–∞–µ—Ç –ª–∞–π–∫–∏ —Å —Ñ–æ—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            candidate_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        """
        candidate = self.user_cache.get(user_id, {}).get('current_candidate')
        if not candidate or not candidate.get('photos'):
            return
            
        db = next(get_db())
        unliked = False
        
        for photo in candidate['photos'][:3]:
            if unlike_photo(db, user_id, photo['owner_id'], photo['id']):
                unliked = True
        
        if unliked:
            self.vk.messages.send(
                user_id=user_id,
                message="üíî –õ–∞–π–∫–∏ —É–±—Ä–∞–Ω—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
                keyboard=get_candidate_keyboard(False),
                random_id=0
            )

    def add_to_favorites(self, user_id: int, candidate_id: int):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            candidate_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        """
        db = next(get_db())
        if add_to_favorites(db, user_id, candidate_id):
            self.vk.messages.send(
                user_id=user_id,
                message="‚≠ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                random_id=0
            )
        else:
            self.vk.messages.send(
                user_id=user_id,
                message="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                random_id=0
            )

    def add_to_blacklist(self, user_id: int, candidate_id: int):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            candidate_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        """
        db = next(get_db())
        if add_to_blacklist(db, user_id, candidate_id):
            self.vk.messages.send(
                user_id=user_id,
                message="üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
                random_id=0
            )
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            self.start_search(user_id)
        else:
            self.vk.messages.send(
                user_id=user_id,
                message="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
                random_id=0
            )

    def show_search_settings(self, user_id: int):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            db = next(get_db())
            save_user_state(db, user_id, BotState.SEARCH_SETTINGS)
            
            params = get_search_params(db, user_id)
            if not params:
                self._init_default_search_params(user_id)
                params = get_search_params(db, user_id)
            
            message = (
                "üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:\n\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: –æ—Ç {params.min_age} –¥–æ {params.max_age}\n"
                f"‚Ä¢ –ü–æ–ª: {params.gender}\n"
                f"‚Ä¢ –ì–æ—Ä–æ–¥: {params.city or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚Ä¢ –¢–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ: {'–¥–∞' if params.has_photo else '–Ω–µ—Ç'}"
            )
            
            self.vk.messages.send(
                user_id=user_id,
                message=message,
                keyboard=get_search_settings_keyboard(),
                random_id=0
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self.vk.messages.send(
                user_id=user_id,
                message="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                random_id=0
            )

    def _init_default_search_params(self, user_id: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        db = next(get_db())
        user = get_user(db, user_id)
        if not user:
            return
            
        default_params = {
            "min_age": max(18, (user.age or 25) - 5),
            "max_age": (user.age or 25) + 5,
            "gender": "female" if user.gender == "male" else "male",
            "city": user.city,
            "has_photo": True
        }
        
        update_search_params(db, user_id, **default_params)

    def _ask_min_age(self, user_id: int):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        db = next(get_db())
        save_user_state(db, user_id, BotState.AWAITING_MIN_AGE)
        self.vk.messages.send(
            user_id=user_id,
            message="–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–æ—Ç 18):",
            keyboard=get_empty_keyboard(),
            random_id=0
        )

    def _ask_max_age(self, user_id: int):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        db = next(get_db())
        save_user_state(db, user_id, BotState.AWAITING_MAX_AGE)
        self.vk.messages.send(
            user_id=user_id,
            message="–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–¥–æ 99):",
            keyboard=get_empty_keyboard(),
            random_id=0
        )

    def _ask_city(self, user_id: int):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        db = next(get_db())
        save_user_state(db, user_id, BotState.AWAITING_CITY)
        self.vk.messages.send(
            user_id=user_id,
            message="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            keyboard=get_empty_keyboard(),
            random_id=0
        )

    def handle_message(self, user_id: int, text: str):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        db = next(get_db())
        state = get_user_state(db, user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if text.lower() in ['–º–µ–Ω—é', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']:
            self._show_main_menu(user_id)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        if state == BotState.AWAITING_MIN_AGE:
            self._process_age_input(user_id, text, 'min')
            save_user_state(db, user_id, BotState.SEARCH_SETTINGS)
            return
        elif state == BotState.AWAITING_MAX_AGE:
            self._process_age_input(user_id, text, 'max')
            save_user_state(db, user_id, BotState.SEARCH_SETTINGS)
            return
        elif state == BotState.AWAITING_CITY:
            self._process_city_input(user_id, text)
            save_user_state(db, user_id, BotState.SEARCH_SETTINGS)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
        if state == BotState.MAIN_MENU:
            self._handle_main_menu(user_id, text)
        elif state == BotState.VIEWING_CANDIDATE:
            self._handle_candidate_actions(user_id, text)
        elif state == BotState.FAVORITES:
            self._handle_favorites_actions(user_id, text)
        elif state == BotState.SEARCH_SETTINGS:
            self._handle_settings_actions(user_id, text)
        elif state == BotState.PRIORITY_SETTINGS:
            if text == 'üîô –ù–∞–∑–∞–¥':
                self.show_search_settings(user_id)
            else:
                self._process_priority_selection(user_id, text)
        else:
            self._show_main_menu(user_id)

    def _handle_main_menu(self, user_id: int, text: str):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if text == 'üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—É':
            self.start_search(user_id)
        elif text == '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
            self.show_favorites(user_id)
        elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            self.show_search_settings(user_id)
        elif text == '‚ùå –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫':
            self.show_blacklist(user_id)
        elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
            self.show_help(user_id)
        else:
            self.vk.messages.send(
                user_id=user_id,
                message="‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
                random_id=0
            )

    def _handle_candidate_actions(self, user_id: int, text: str):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        candidate = self.user_cache.get(user_id, {}).get('current_candidate')
        if not candidate:
            self.start_search(user_id)
            return
            
        if text == '‚ù§Ô∏è –õ–∞–π–∫':
            self.like_candidate_photos(user_id, candidate['id'])
        elif text == 'üíî –£–±—Ä–∞—Ç—å –ª–∞–π–∫':
            self.unlike_candidate_photos(user_id, candidate['id'])
        elif text == '‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
            self.add_to_favorites(user_id, candidate['id'])
        elif text == '‚úñÔ∏è –í —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫':
            self.add_to_blacklist(user_id, candidate['id'])
        elif text == '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π':
            self.start_search(user_id)
        elif text == 'üè† –í –º–µ–Ω—é':
            self._show_main_menu(user_id)
        else:
            self.vk.messages.send(
                user_id=user_id,
                message="‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º",
                random_id=0
            )

    def _handle_favorites_actions(self, user_id: int, text: str):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if text == 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
            self.view_favorite(user_id)
        elif text == 'üóë –£–¥–∞–ª–∏—Ç—å':
            self.ask_favorite_to_remove(user_id)
        elif text == 'üîô –ù–∞–∑–∞–¥':
            self._show_main_menu(user_id)
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É
            if text.isdigit():
                self.remove_favorite(user_id, int(text))
            else:
                self.vk.messages.send(
                    user_id=user_id,
                    message="‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    random_id=0
                )

    def _handle_settings_actions(self, user_id: int, text: str):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if text == 'üë∂ –í–æ–∑—Ä–∞—Å—Ç –æ—Ç':
            self._ask_min_age(user_id)
        elif text == 'üë¥ –í–æ–∑—Ä–∞—Å—Ç –¥–æ':
            self._ask_max_age(user_id)
        elif text == 'üèô –ì–æ—Ä–æ–¥':
            self._ask_city(user_id)
        elif text == 'üë´ –ü–æ–ª':
            self._ask_gender(user_id)
        elif text == 'üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã':
            self._show_priority_settings(user_id)
        elif text == '‚úÖ –ì–æ—Ç–æ–≤–æ':
            self._show_main_menu(user_id)
        elif text == 'üîô –ù–∞–∑–∞–¥':
            self._show_main_menu(user_id)
        else:
            self.vk.messages.send(
                user_id=user_id,
                message="‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                random_id=0
            )

    def _show_main_menu(self, user_id: int):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        db = next(get_db())
        save_user_state(db, user_id, BotState.MAIN_MENU)
        self.vk.messages.send(
            user_id=user_id,
            message="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            keyboard=get_main_keyboard(),
            random_id=0
        )

    def _process_age_input(self, user_id: int, text: str, age_type: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            age_type: –¢–∏–ø –≤–æ–∑—Ä–∞—Å—Ç–∞ ('min' –∏–ª–∏ 'max')
        """
        try:
            age = int(text)
            if age_type == 'min' and (age < 18 or age > 99):
                raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 99")
            elif age_type == 'max' and (age < 18 or age > 99):
                raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 99")
                
            update_search_params(next(get_db()), user_id, **{f"{age_type}_age": age})
            self.show_search_settings(user_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            
        except ValueError as e:
            self.vk.messages.send(
                user_id=user_id,
                message=f"‚ùå {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                keyboard=get_empty_keyboard(),
                random_id=0
            )
            # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            save_user_state(next(get_db()), user_id, 
                        BotState.AWAITING_MIN_AGE if age_type == 'min' 
                        else BotState.AWAITING_MAX_AGE)

    def _process_city_input(self, user_id: int, text: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        db = next(get_db())
        try:
            update_search_params(db, user_id, city=text)
            self.show_search_settings(user_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        except Exception as e:
            logger.error(f"Error setting city: {e}")
            self.vk.messages.send(
                user_id=user_id,
                message="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                keyboard=get_empty_keyboard(),
                random_id=0
            )
            save_user_state(db, user_id, BotState.AWAITING_CITY)

    def _process_gender_selection(self, user_id: int, text: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ª–∞
        """
        gender_map = {
            'üë® –ú—É–∂—Å–∫–æ–π': 'male',
            'üë© –ñ–µ–Ω—Å–∫–∏–π': 'female',
            'üë• –õ—é–±–æ–π': 'any'
        }
        
        if text in gender_map:
            update_search_params(next(get_db()), user_id, gender=gender_map[text])
            self.vk.messages.send(
                user_id=user_id,
                message=f"‚úÖ –ü–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}",
                keyboard=get_search_settings_keyboard(),
                random_id=0
            )
        else:
            self.vk.messages.send(
                user_id=user_id,
                message="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª–∞",
                random_id=0
            )

    def _process_priority_selection(self, user_id: int, text: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        """
        priority_map = {
            'üî¢ –í–æ–∑—Ä–∞—Å—Ç –≤–∞–∂–Ω–µ–µ': {'age_weight': 1.0, 'interests_weight': 0.7},
            'üéµ –ú—É–∑—ã–∫–∞ –≤–∞–∂–Ω–µ–µ': {'interests_weight': 1.0, 'age_weight': 0.7},
            'üìö –ö–Ω–∏–≥–∏ –≤–∞–∂–Ω–µ–µ': {'interests_weight': 1.0, 'age_weight': 0.7},
            'üë• –î—Ä—É–∑—å—è –≤–∞–∂–Ω–µ–µ': {'friends_weight': 1.0, 'age_weight': 0.7}
        }
        
        if text in priority_map:
            update_search_params(next(get_db()), user_id, **priority_map[text])
            self.vk.messages.send(
                user_id=user_id,
                message=f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}",
                keyboard=get_priority_settings_keyboard(),
                random_id=0
            )
        else:
            self.vk.messages.send(
                user_id=user_id,
                message="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞",
                random_id=0
            )

    def show_blacklist(self, user_id: int):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            db = next(get_db())
            blacklist = get_blacklist(db, user_id)
            
            if not blacklist:
                message = "–í–∞—à —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
            else:
                message = "üö´ –í–∞—à —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n" + "\n".join(
                    [f"{i+1}. id{user.blocked_user_id}" for i, user in enumerate(blacklist)]
                )
                
            self.vk.messages.send(
                user_id=user_id,
                message=message,
                keyboard=get_main_keyboard(),
                random_id=0
            )
        except Exception as e:
            logger.error(f"Error showing blacklist: {e}")
            self.vk.messages.send(
                user_id=user_id,
                message="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                random_id=0
            )

    def show_help(self, user_id: int):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –±–æ—Ç—É.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        help_text = """
        ‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:
        
        üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—É - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
        ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ - –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
        ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        ‚ùå –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        
        –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å:
        - –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        - –ì–æ—Ä–æ–¥
        - –ü–æ–ª
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        self.vk.messages.send(
            user_id=user_id,
            message=help_text,
            keyboard=get_main_keyboard(),
            random_id=0
        )

    def run(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
        
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç VK LongPoll API.
        """
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        while True:
            try:
                for event in self.longpoll.listen():
                    if event.type == VkBotEventType.MESSAGE_NEW:
                        user_id = event.obj.message['from_id']
                        text = event.obj.message['text']
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                        auth_response = self.handle_auth_flow(user_id, text)
                        if auth_response:
                            self.vk.messages.send(
                                user_id=user_id,
                                message=auth_response,
                                random_id=0
                            )
                            continue
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        db = next(get_db())
                        user = get_user(db, user_id)
                        
                        if not user or not user.access_token:
                            self.vk.messages.send(
                                user_id=user_id,
                                message="üîí –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ '–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'",
                                random_id=0
                            )
                            continue
                            
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        self.handle_message(user_id, text)
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
                if "connection" in str(e).lower():
                    self._init_group_session()


if __name__ == "__main__":
    bot = VKBot()
    bot.run()
